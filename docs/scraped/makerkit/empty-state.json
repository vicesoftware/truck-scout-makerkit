{
  "title": "Empty State",
  "pages": [
    {
      "url": "https://makerkit.dev/docs/next-supabase-turbo/components/empty-state",
      "title": "Empty State Component in the Next.js Supabase SaaS kit",
      "content": "Empty State Component in the Next.js Supabase SaaS kitLearn how to use the Empty State component in the Next.js Supabase SaaS kit\n\nThe EmptyState component is a flexible and reusable UI element designed to display when there's no content to show. It's perfect for scenarios like empty lists, search results with no matches, or initial states of features.Dark themeColorComponentsEmptyState: The main wrapper componentEmptyStateHeading: For the main headingEmptyStateText: For descriptive textEmptyStateButton: For a call-to-action buttonUsageimport { EmptyState, EmptyStateHeading, EmptyStateText, EmptyStateButton } from '@kit/ui/empty-state';function MyComponent() {  return (    <EmptyState>      <EmptyStateHeading>No results found</EmptyStateHeading>      <EmptyStateText>Try adjusting your search or filter to find what you're looking for.</EmptyStateText>      <EmptyStateButton>Clear filters</EmptyStateButton>    </EmptyState>  );}Component DetailsEmptyStateThe main container that wraps all other components.Props: Accepts all standard div propsStyling:Flex container with centered contentRounded corners with a dashed borderLight shadow for depthEmptyStateHeadingUsed for the main heading of the empty state.Props: Accepts all standard h3 propsStyling:Large text (2xl)Bold fontTight letter spacingEmptyStateTextFor descriptive text explaining the empty state or providing guidance.Props: Accepts all standard p propsStyling:Small textMuted color for less emphasisEmptyStateButtonA button component for primary actions.Props: Accepts all props from the base Button componentStyling:Margin top for spacingInherits styles from the base Button componentFeaturesFlexible Structure: Components can be used in any order, and additional custom elements can be added.Automatic Layout: The component automatically arranges its children in a centered, vertical layout.Customizable: Each subcomponent accepts className props for custom styling.Type-Safe: Utilizes TypeScript for prop type checking.CustomizationYou can customize the appearance of each component by passing a className prop:<EmptyState className=\"bg-gray-100\">  <EmptyStateHeading className=\"text-primary\">Custom Heading</EmptyStateHeading>  <EmptyStateText className=\"text-lg\">Larger descriptive text</EmptyStateText>  <EmptyStateButton className=\"bg-secondary\">Custom Button</EmptyStateButton></EmptyState>This EmptyState component provides a clean, consistent way to handle empty states in your application. Its modular design allows for easy customization while maintaining a cohesive look and feel across different use cases."
    }
  ]
}