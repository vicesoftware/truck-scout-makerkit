{
  "title": "Cookie Banner",
  "pages": [
    {
      "url": "https://makerkit.dev/docs/next-supabase-turbo/components/cookie-banner",
      "title": "Cookie Banner Component in the Next.js Supabase SaaS kit",
      "content": "Cookie Banner Component in the Next.js Supabase SaaS kitLearn how to use the Cookie Banner component in the Next.js Supabase SaaS kit\n\nThis module provides a CookieBanner component and a useCookieConsent hook for managing cookie consent in React applications.Dark themeColorCookieBanner ComponentThe CookieBanner component displays a consent banner for cookies and tracking technologies.Usageimport dynamic from 'next/dynamic';const CookieBanner = dynamic(() => import('@kit/ui/cookie-banner').then(m => m.CookieBanner), {  ssr: false});function App() {  return (    <div>      {/* Your app content */}      <CookieBanner />    </div>  );}FeaturesDisplays only when consent status is unknownAutomatically hides after user interactionResponsive design (different layouts for mobile and desktop)Internationalization support via the Trans componentAnimated entrance using Tailwind CSSuseCookieConsent HookThis custom hook manages the cookie consent state and provides methods to update it.Usageimport { useCookieConsent } from '@kit/ui/cookie-banner';function MyComponent() {  const { status, accept, reject, clear } = useCookieConsent();  // Use these values and functions as needed}APIstatus: ConsentStatus: Current consent status (Accepted, Rejected, or Unknown)accept(): void: Function to accept cookiesreject(): void: Function to reject cookiesclear(): void: Function to clear the current consent statusConsentStatus Enumenum ConsentStatus {  Accepted = 'accepted',  Rejected = 'rejected',  Unknown = 'unknown'}Key FeaturesPersistent Storage: Consent status is stored in localStorage for persistence across sessions.Server-Side Rendering Compatible: Checks for browser environment before accessing localStorage.Customizable: The COOKIE_CONSENT_STATUS key can be configured as needed.Reactive: The banner automatically updates based on the consent status.StylingThe component uses Tailwind CSS for styling, with support for dark mode and responsive design.AccessibilityUses Radix UI's Dialog primitive for improved accessibilityAutofocu s on the \"Accept\" button for keyboard navigationInternationalizationThe component uses the Trans component for internationalization. Ensure you have the following keys in your i18n configuration:cookieBanner.titlecookieBanner.descriptioncookieBanner.rejectcookieBanner.acceptBest PracticesPlace the CookieBanner component at the root of your application to ensure it's always visible when needed.Use the useCookieConsent hook to conditionally render content or initialize tracking scripts based on the user's consent.Provide clear and concise information about your cookie usage in the banner description.Ensure your privacy policy is up-to-date and accessible from the cookie banner or nearby.Example: Conditional Script Loadingfunction App() {  const { status } = useCookieConsent();  useEffect(() => {    if (status === ConsentStatus.Accepted) {      // Initialize analytics or other cookie-dependent scripts    }  }, [status]);  return (    <div>      {/* Your app content */}      <CookieBanner />    </div>  );}This cookie consent management system provides a user-friendly way to comply with cookie laws and regulations while maintaining a good user experience."
    }
  ]
}