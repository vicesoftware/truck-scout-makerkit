{
  "title": "Loading Overlay",
  "pages": [
    {
      "url": "https://makerkit.dev/docs/next-supabase-turbo/components/loading-overlay",
      "title": "Loading Overlay Component in the Next.js Supabase SaaS kit",
      "content": "Loading Overlay Component in the Next.js Supabase SaaS kitLearn how to use the Loading Overlay component in the Next.js Supabase SaaS kit\n\nThe LoadingOverlay component is a versatile UI element designed to display a loading state with a spinner and optional content. It's perfect for indicating background processes or page loads in your application.Dark themeColorFeaturesCustomizable appearance through CSS classesOption for full-page overlay or inline loading indicatorSpinner animation with customizable stylingAbility to include additional content or messagesUsageimport { LoadingOverlay } from '@kit/ui/loading-overlay';function MyComponent() {  return (    <LoadingOverlay>      Loading your content...    </LoadingOverlay>  );}PropsThe LoadingOverlay component accepts the following props:children?: React.ReactNode: Optional content to display below the spinner.className?: string: Additional CSS classes to apply to the container.spinnerClassName?: string: CSS classes to apply to the spinner component.fullPage?: boolean: Whether to display as a full-page overlay. Defaults to true.ExamplesFull-page overlay<LoadingOverlay>  Please wait while we load your dashboard...</LoadingOverlay>Inline loading indicator<LoadingOverlay fullPage={false} className=\"h-40\">  Fetching results...</LoadingOverlay>Customized appearance<LoadingOverlay  className=\"bg-gray-800 text-white\"  spinnerClassName=\"text-blue-500\">  Processing your request...</LoadingOverlay>StylingThe LoadingOverlay uses Tailwind CSS for styling. Key classes include:Flex layout with centered content: flex flex-col items-center justify-centerSpace between spinner and content: space-y-4Full-page overlay (when fullPage is true):fixed left-0 top-0 z-[100] h-screen w-screen bg-backgroundYou can further customize the appearance by passing additional classes through the className and spinnerClassName props.AccessibilityWhen using the LoadingOverlay, consider adding appropriate ARIA attributes to improve accessibility, such as aria-busy=\"true\" on the parent element that's in a loading state.Best PracticesUse full-page overlays sparingly to avoid disrupting user experience.Provide clear, concise messages to inform users about what's loading.Consider using inline loading indicators for smaller UI elements or partial page updates.Ensure sufficient contrast between the overlay and the spinner for visibility.The LoadingOverlay component provides a simple yet effective way to indicate loading states in your application, enhancing user experience by providing visual feedback during asynchronous operations or content loads."
    }
  ]
}