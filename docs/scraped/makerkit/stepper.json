{
  "title": "Stepper",
  "pages": [
    {
      "url": "https://makerkit.dev/docs/next-supabase-turbo/components/stepper",
      "title": "Stepper Component in the Next.js Supabase SaaS kit",
      "content": "Stepper Component in the Next.js Supabase SaaS kitLearn how to use the Stepper component in the Next.js Supabase SaaS kit\n\nThe Stepper component is a versatile UI element designed to display a series of steps in a process or form. It provides visual feedback on the current step and supports different visual styles.Dark themeColorUsageimport { Stepper } from '@kit/ui/stepper';function MyComponent() {  return (    <Stepper      steps={['Step 1', 'Step 2', 'Step 3']}      currentStep={1}      variant=\"default\"    />  );}PropsThe Stepper component accepts the following props:steps: string[] (required): An array of strings representing the labels for each step.currentStep: number (required): The index of the currently active step (0-based).variant?: 'numbers' | 'default' (optional): The visual style of the stepper. Defaults to 'default'.VariantsThe Stepper component supports two visual variants:default: Displays steps as a horizontal line with labels underneath.numbers: Displays steps as numbered circles with labels between them.Dark themeColorFeaturesResponsive design that adapts to different screen sizesDark mode supportCustomizable appearance through CSS classes and variantsAccessibility support with proper ARIA attributesComponent BreakdownMain Stepper ComponentThe main Stepper function renders the overall structure of the component. It:Handles prop validation and default valuesRenders nothing if there are fewer than two stepsUses a callback to render individual stepsApplies different CSS classes based on the chosen variantSteps RenderingSteps are rendered using a combination of divs and spans, with different styling applied based on:Whether the step is currently selectedThe chosen variant (default or numbers)StepDivider ComponentFor the 'numbers' variant, a StepDivider component is used to render the labels between numbered steps. It includes:Styling for selected and non-selected statesA divider line between steps (except for the last step)StylingThe component uses a combination of:Tailwind CSS classes for basic stylingcva (Class Variance Authority) for managing variant-based stylingclassNames function for conditional class applicationAccessibilityThe component uses aria-selected to indicate the current stepLabels are associated with their respective steps for screen readersCustomizationYou can further customize the appearance of the Stepper by:Modifying the classNameBuilder function to add or change CSS classesAdjusting the Tailwind CSS classes in the component JSXCreating new variants in the cva configurationExample<Stepper  steps={['Account', 'Personal Info', 'Review']}  currentStep={1}  variant=\"numbers\"/>This will render a numbered stepper with three steps, where \"Personal Info\" is the current (selected) step.The Stepper component provides a flexible and visually appealing way to guide users through multi-step processes in your application. Its support for different variants and easy customization makes it adaptable to various design requirements."
    }
  ]
}