{
  "title": "Page",
  "pages": [
    {
      "url": "https://makerkit.dev/docs/next-supabase-turbo/components/page",
      "title": "Page Component in the Next.js Supabase SaaS kit",
      "content": "Page Component in the Next.js Supabase SaaS kitLearn how to use the Page component in the Next.js Supabase SaaS kit\n\nThe Page component is a versatile layout component that provides different page structures based on the specified style. It's designed to create consistent layouts across your application with support for sidebar and header-based designs.Usageimport { Page, PageNavigation, PageBody, PageHeader } from '@kit/ui/page';function MyPage() {  return (    <Page style=\"sidebar\">      <PageNavigation>        {/* Navigation content */}      </PageNavigation>      <PageHeader title=\"Dashboard\" description=\"Welcome to your dashboard\">        {/* Optional header content */}      </PageHeader>      <PageBody>        {/* Main page content */}      </PageBody>    </Page>  );}Page Component Propsstyle?: 'sidebar' | 'header' | 'custom': Determines the layout style (default: 'sidebar')contentContainerClassName?: string: Custom class for the content containerclassName?: string: Additional classes for the main containersticky?: boolean: Whether to make the header sticky (for 'header' style)Sub-componentsPageNavigationWraps the navigation content, typically used within the Page component.PageMobileNavigationWraps the mobile navigation content, displayed only on smaller screens.PageBodyContains the main content of the page.Props:className?: string: Additional classes for the body containerPageHeaderDisplays the page title and description.Props:title?: string | React.ReactNode: The page titledescription?: string | React.ReactNode: The page descriptionclassName?: string: Additional classes for the header containerPageTitleRenders the main title of the page.PageDescriptionRenders the description text below the page title.Layout StylesSidebar LayoutThe default layout, featuring a sidebar navigation and main content area.Header LayoutA layout with a top navigation bar and content below.Custom LayoutAllows for complete custom layouts by directly rendering children.ExamplesSidebar Layout<Page style=\"sidebar\">  <PageNavigation>    <SidebarContent />  </PageNavigation>  <PageHeader title=\"Dashboard\" description=\"Overview of your account\">    <UserMenu />  </PageHeader>  <PageBody>    <DashboardContent />  </PageBody></Page>Header Layout<Page style=\"header\" sticky={true}>  <PageNavigation>    <HeaderNavLinks />  </PageNavigation>  <PageMobileNavigation>    <MobileMenu />  </PageMobileNavigation>  <PageBody>    <PageHeader title=\"Profile\" description=\"Manage your account settings\" />    <ProfileSettings />  </PageBody></Page>CustomizationThe Page component and its sub-components use Tailwind CSS classes for styling. You can further customize the appearance by passing additional classes through the className props or by modifying the default classes in the component implementation.Best PracticesUse consistent layout styles across similar pages for a cohesive user experience.Leverage the PageHeader component to provide clear page titles and descriptions.Utilize the PageNavigation and PageMobileNavigation components to create responsive navigation experiences.When using the 'custom' style, ensure you handle responsive behavior manually.The Page component and its related components provide a flexible system for creating structured, responsive layouts in your React application, promoting consistency and ease of maintenance across your project."
    }
  ]
}